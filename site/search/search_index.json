{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the Samsung Galaxy Store client that provides a python interface to fetch information about Samsung Galaxy Store categories and apps. Table Of Contents The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts: Tutorials How-To Guides Reference Explanation Quickly find what you're looking for depending on your use case by looking at the different pages. Acknowledgements","title":"Samsung Galaxy Store Docs"},{"location":"#table-of-contents","text":"The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts: Tutorials How-To Guides Reference Explanation Quickly find what you're looking for depending on your use case by looking at the different pages.","title":"Table Of Contents"},{"location":"#acknowledgements","text":"","title":"Acknowledgements"},{"location":"explanation/","text":"This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented. Note: Expand this section by considering the following points: Give context and background on your library Explain why you created it Provide multiple examples and approaches of how to work with it Help the reader make connections Avoid writing instructions or technical descriptions here","title":"Explanation"},{"location":"how-to-guides/","text":"This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project. How To Add Two Numbers? You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers, and you'll always get a float as a result.","title":"How-To Guides"},{"location":"how-to-guides/#how-to-add-two-numbers","text":"You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers, and you'll always get a float as a result.","title":"How To Add Two Numbers?"},{"location":"reference/","text":"This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the calculator project code. BaseModel dataclass Model utilities functions for derived classes. Source code in samsung_galaxy_store\\models.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @dataclass class BaseModel : \"\"\"Model utilities functions for derived classes.\"\"\" def json ( self ) -> Dict [ str , Any ]: \"\"\"Minimal JSON representation of the class attributes. Returns: A dictionary of all the class attributes with non-null or empty values and datetimes serialized. \"\"\" maximized : Dict [ str , Any ] = {} for key , value in self . __dict__ . items (): if value and isinstance ( value , BaseModel ): maximized [ key ] = value . json () else : maximized [ key ] = value return serialize_datetimes ( minimize_dict ( maximized )) json () Minimal JSON representation of the class attributes. Returns: Type Description Dict [ str , Any ] A dictionary of all the class attributes with non-null or empty values and datetimes serialized. Source code in samsung_galaxy_store\\models.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def json ( self ) -> Dict [ str , Any ]: \"\"\"Minimal JSON representation of the class attributes. Returns: A dictionary of all the class attributes with non-null or empty values and datetimes serialized. \"\"\" maximized : Dict [ str , Any ] = {} for key , value in self . __dict__ . items (): if value and isinstance ( value , BaseModel ): maximized [ key ] = value . json () else : maximized [ key ] = value return serialize_datetimes ( minimize_dict ( maximized )) Category dataclass Bases: BaseModel A Samsung Galaxy Store app category. Attributes: Name Type Description id str The category id, format is G0000##### translation_id str Upper-underscore case slug for the category. name str Pretty category name for the user. icon_url str The category icon url. watch_face bool Whether the category supports Samsung Watch faces. content_id str Numeric identifier for a category, format is 000000#### Source code in samsung_galaxy_store\\models.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 @dataclass class Category ( BaseModel ): \"\"\"A Samsung Galaxy Store app category. Attributes: id: The category id, format is `G0000#####` translation_id: Upper-underscore case slug for the category. name: Pretty category name for the user. icon_url: The category icon url. watch_face: Whether the category supports Samsung Watch faces. content_id: Numeric identifier for a category, format is `000000####` \"\"\" id : str translation_id : str name : str icon_url : str watch_face : bool content_id : str Developer dataclass Bases: BaseModel A Samsung Galaxy Store app developer. Attributes: Name Type Description name str Pretty developer name for the user. url str The developer website. phone str The developer contact person phone number. address str The developer headquarter address. representative str The developer contact person. contact_first_name str Either the representative first name or title. contact_last_name str Either the representative last name or nothing. Source code in samsung_galaxy_store\\models.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 @dataclass class Developer ( BaseModel ): \"\"\"A Samsung Galaxy Store app developer. Attributes: name: Pretty developer name for the user. url: The developer website. phone: The developer contact person phone number. address: The developer headquarter address. representative: The developer contact person. contact_first_name: Either the representative first name or title. contact_last_name: Either the representative last name or nothing. \"\"\" name : str url : str = None phone : str = None address : str = None representative : str = None contact_first_name : str = None contact_last_name : str = None Review dataclass A Samsung Galaxy Store user review of an app. Attributes: Name Type Description text str The body of the user review. user str The first 4 characters of the user name. created_date datetime The date the review was first created. updated_date datetime The most recent date the user made edits to the review. stars float The user rating, 0-5 developer_responded bool Whether the developer responded to the review. user_id str Samsung Galaxy Store user id, not used. Source code in samsung_galaxy_store\\models.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @dataclass class Review : \"\"\"A Samsung Galaxy Store user review of an app. Attributes: text: The body of the user review. user: The first 4 characters of the user name. created_date: The date the review was first created. updated_date: The most recent date the user made edits to the review. stars: The user rating, 0-5 developer_responded: Whether the developer responded to the review. user_id: Samsung Galaxy Store user id, not used. \"\"\" text : str user : str created_date : datetime updated_date : datetime stars : float developer_responded : bool user_id : str","title":"Reference"},{"location":"reference/#samsung_galaxy_store.models.BaseModel","text":"Model utilities functions for derived classes. Source code in samsung_galaxy_store\\models.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @dataclass class BaseModel : \"\"\"Model utilities functions for derived classes.\"\"\" def json ( self ) -> Dict [ str , Any ]: \"\"\"Minimal JSON representation of the class attributes. Returns: A dictionary of all the class attributes with non-null or empty values and datetimes serialized. \"\"\" maximized : Dict [ str , Any ] = {} for key , value in self . __dict__ . items (): if value and isinstance ( value , BaseModel ): maximized [ key ] = value . json () else : maximized [ key ] = value return serialize_datetimes ( minimize_dict ( maximized ))","title":"BaseModel"},{"location":"reference/#samsung_galaxy_store.models.BaseModel.json","text":"Minimal JSON representation of the class attributes. Returns: Type Description Dict [ str , Any ] A dictionary of all the class attributes with non-null or empty values and datetimes serialized. Source code in samsung_galaxy_store\\models.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def json ( self ) -> Dict [ str , Any ]: \"\"\"Minimal JSON representation of the class attributes. Returns: A dictionary of all the class attributes with non-null or empty values and datetimes serialized. \"\"\" maximized : Dict [ str , Any ] = {} for key , value in self . __dict__ . items (): if value and isinstance ( value , BaseModel ): maximized [ key ] = value . json () else : maximized [ key ] = value return serialize_datetimes ( minimize_dict ( maximized ))","title":"json()"},{"location":"reference/#samsung_galaxy_store.models.Category","text":"Bases: BaseModel A Samsung Galaxy Store app category. Attributes: Name Type Description id str The category id, format is G0000##### translation_id str Upper-underscore case slug for the category. name str Pretty category name for the user. icon_url str The category icon url. watch_face bool Whether the category supports Samsung Watch faces. content_id str Numeric identifier for a category, format is 000000#### Source code in samsung_galaxy_store\\models.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 @dataclass class Category ( BaseModel ): \"\"\"A Samsung Galaxy Store app category. Attributes: id: The category id, format is `G0000#####` translation_id: Upper-underscore case slug for the category. name: Pretty category name for the user. icon_url: The category icon url. watch_face: Whether the category supports Samsung Watch faces. content_id: Numeric identifier for a category, format is `000000####` \"\"\" id : str translation_id : str name : str icon_url : str watch_face : bool content_id : str","title":"Category"},{"location":"reference/#samsung_galaxy_store.models.Developer","text":"Bases: BaseModel A Samsung Galaxy Store app developer. Attributes: Name Type Description name str Pretty developer name for the user. url str The developer website. phone str The developer contact person phone number. address str The developer headquarter address. representative str The developer contact person. contact_first_name str Either the representative first name or title. contact_last_name str Either the representative last name or nothing. Source code in samsung_galaxy_store\\models.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 @dataclass class Developer ( BaseModel ): \"\"\"A Samsung Galaxy Store app developer. Attributes: name: Pretty developer name for the user. url: The developer website. phone: The developer contact person phone number. address: The developer headquarter address. representative: The developer contact person. contact_first_name: Either the representative first name or title. contact_last_name: Either the representative last name or nothing. \"\"\" name : str url : str = None phone : str = None address : str = None representative : str = None contact_first_name : str = None contact_last_name : str = None","title":"Developer"},{"location":"reference/#samsung_galaxy_store.models.Review","text":"A Samsung Galaxy Store user review of an app. Attributes: Name Type Description text str The body of the user review. user str The first 4 characters of the user name. created_date datetime The date the review was first created. updated_date datetime The most recent date the user made edits to the review. stars float The user rating, 0-5 developer_responded bool Whether the developer responded to the review. user_id str Samsung Galaxy Store user id, not used. Source code in samsung_galaxy_store\\models.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @dataclass class Review : \"\"\"A Samsung Galaxy Store user review of an app. Attributes: text: The body of the user review. user: The first 4 characters of the user name. created_date: The date the review was first created. updated_date: The most recent date the user made edits to the review. stars: The user rating, 0-5 developer_responded: Whether the developer responded to the review. user_id: Samsung Galaxy Store user id, not used. \"\"\" text : str user : str created_date : datetime updated_date : datetime stars : float developer_responded : bool user_id : str","title":"Review"},{"location":"tutorials/","text":"This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project. Note: Expand this section by considering the following points: Help newcomers with getting started Teach readers about your library by making them write code Inspire confidence through examples that work for everyone, repeatably Give readers an immediate sense of achievement Show concrete examples, no abstractions Provide the minimum necessary explanation Avoid any distractions","title":"Tutorials"}]}